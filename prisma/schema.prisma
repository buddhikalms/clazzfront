generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?   @unique
  role          Role      @default(STUDENT)
  otpCode       String?
  otpExpires    DateTime?
  teacherId     String?   @unique
  studentId     String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  teacher  Teacher?  @relation("UserTeacher")
  student  Student?  @relation("UserStudent")

  followers Follow[] @relation("UserFollowers")
}

model Teacher {
  id                  String   @id @default(uuid())
  slug                String   @unique
  name                String
  subject             String
  experience          String
  rating              Float    @default(0.0)
  coverImage          String
  profileImage        String
  bio                 String?  @db.Text
  qualifications      Json
  subjects            Json
  allowedCountries    Json?
  restrictedCountries Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String?  @unique

  user         User?         @relation("UserTeacher", fields: [userId], references: [id], onDelete: SetNull)
  schedules    Schedule[]
  courses      Course[]
  reviews      Review[]
  appointments Appointment[]
  followers    Follow[]      @relation("TeacherFollowers")
}

model Student {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User          @relation("UserStudent", fields: [userId], references: [id], onDelete: Cascade)
  purchasedCourses Course[]      @relation("StudentPurchasedCourses")
  purchasedLessons Lesson[]      @relation("StudentPurchasedLessons")
  reviews          Review[]
  appointments     Appointment[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User    @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following Teacher @relation("TeacherFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Course {
  id               String           @id @default(uuid())
  slug             String?          @unique
  teacherId        String
  title            String
  duration         String
  level            String
  description      String
  ageLimit         String?
  price            Float
  enrollmentStatus EnrollmentStatus @default(OPEN)
  image            String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  teacher     Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  schedules   Schedule[]
  lessons     Lesson[]
  purchasedBy Student[]  @relation("StudentPurchasedCourses")
}

model Lesson {
  id        String   @id @default(uuid())
  courseId  String
  title     String
  duration  String
  price     Float
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  purchasedBy    Student[]       @relation("StudentPurchasedLessons")
  lessonIncludes LessonInclude[]
}

model LessonInclude {
  id        String      @id @default(uuid())
  lessonId  String
  type      IncludeType
  url       String
  title     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Subjects {
  id          String @id @default(uuid())
  title       String
  slug        String
  parent      String
  icon        String
  description String
}

model Schedule {
  id        String       @id @default(uuid())
  teacherId String
  courseId  String?
  day       String
  startTime String
  endTime   String
  type      ScheduleType @default(AVAILABLE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  course  Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
}

model Review {
  id        String   @id @default(uuid())
  teacherId String
  studentId String?
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Appointment {
  id          String      @id @default(uuid())
  teacherId   String
  studentId   String
  date        DateTime
  startTime   String
  sessionType SessionType @default(HOUR)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum EnrollmentStatus {
  OPEN
  CLOSED
}

enum ScheduleType {
  SCHEDULED
  AVAILABLE
}

enum SessionType {
  HALF_HOUR
  HOUR
  HOUR_AND_HALF
}

enum IncludeType {
  RECORDING
  PDF
  DOCUMENT
  IMAGE
}
